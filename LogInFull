public class BankManagementSystem {
    private static JFrame mainFrame;
    private static JPanel mainPanel;
    private static CardLayout cardLayout;
    private static List<User> userList = new ArrayList<>();
    private static User currentUser;
    private static File usersFile = new File("users.txt");

    private static void createAndShowGUI() {
    mainFrame = new JFrame("Login System");
    mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    mainPanel = new JPanel();
    cardLayout = new CardLayout();
    mainPanel.setLayout(cardLayout); // Set CardLayout for mainPanel

    // Create panels for login, registration, and main menu
    createLoginPanel();
    createRegisterPanel();
    createMainMenu();

    ImageIcon icon = new ImageIcon("bgw.png"); // Replace with the actual path to your image
    Image img = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
    ImageIcon scaledIcon = new ImageIcon(img);
    JLabel imageLabel = new JLabel(scaledIcon);

    // Create a panel for login details
    JPanel loginDetailsPanel = new JPanel(new GridLayout(3, 2, 10, 10)); // Adjust grid layout as needed

    // Add login details components to the panel (example labels and text fields)
    loginDetailsPanel.add(new JLabel("Username:"));
    loginDetailsPanel.add(new JTextField());
    loginDetailsPanel.add(new JLabel("Password:"));
    loginDetailsPanel.add(new JPasswordField());
    loginDetailsPanel.add(new JButton("Login"));
    loginDetailsPanel.add(new JButton("Create")); // Adjust this button based on your needs

    // Create a container panel to hold both the image panel and the main panel with CardLayout
    JPanel containerPanel = new JPanel(new GridLayout(1, 2, 10, 10));
    containerPanel.add(imageLabel);
    containerPanel.add(loginDetailsPanel);

    mainFrame.add(containerPanel);
    mainFrame.setSize(700, 300);
    mainFrame.setLocationRelativeTo(null);
    mainFrame.setVisible(true);

    // Show the login panel by default
    cardLayout.show(mainPanel, "LoginPanel");

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
        if (currentUser != null) {
            currentUser.saveTransactionHistory();
            currentUser.saveProfileInfo();
        }
        saveAllUserData();
    }));
}
    private static void createLoginPanel() {
        JPanel loginPanel = new JPanel(new GridLayout(4, 2, 10, 10));
    loginPanel.setBorder(BorderFactory.createEmptyBorder(5, 120, 5, 5));
    Font labelFont = new Font("Arial", Font.BOLD, 14);



        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton goToRegisterButton = new JButton("Register");
        


        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (validateLogin(username, password)) {
                    JOptionPane.showMessageDialog(mainFrame, "Login successful!");
                    cardLayout.show(mainPanel, "MainMenu"); // Switch to the main menu
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Invalid username/password combination.");
                }
            }
        });

        goToRegisterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Register");
            }
        });

        loginPanel.add(usernameLabel);
        loginPanel.add(usernameField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(goToRegisterButton);
        

        mainPanel.add(loginPanel, "Login");
    }

    private static boolean validateLogin(String username, String password) {
        // Validate user login credentials
        for (User user : userList) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                currentUser = user;
                currentUser.loadTransactionHistory();
                currentUser.loadProfileInfo(); // Load additional profile information
                return true;
            }
        }
        return false;
    }

    private static void createRegisterPanel() {
        // Create register panel with components and actions
        JPanel registerPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        registerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel idLabel = new JLabel("ID:");
        idLabel.setFont(labelFont);
        JTextField idField = new JTextField();
        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
        confirmPasswordLabel.setFont(labelFont);
        JPasswordField confirmPasswordField = new JPasswordField();
        JButton registerButton = new JButton("Register");
        JButton goToLoginButton = new JButton("Login");

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                if (id.trim().isEmpty() || username.trim().isEmpty() || password.trim().isEmpty() || confirmPassword.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(mainFrame, "Please fill in all fields.");
                    return;
                }

                // Check if the username already exists
                if (isUsernameTaken(username)) {
                    JOptionPane.showMessageDialog(mainFrame, "Username already exists. Please choose a different username.");
                } else {
                    // Register the new user
                    if (registerUser(username, password)) {
                        JOptionPane.showMessageDialog(mainFrame, "Registration successful!");
                        cardLayout.show(mainPanel, "Login");
                    } else {
                        JOptionPane.showMessageDialog(mainFrame, "Error registering user.");
                    }
                }
            }
        });        
        
        goToLoginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Login");
            }
        });

        registerPanel.add(idLabel);
        registerPanel.add(idField);
        registerPanel.add(usernameLabel);
        registerPanel.add(usernameField);
        registerPanel.add(passwordLabel);
        registerPanel.add(passwordField);
        registerPanel.add(confirmPasswordLabel);
        registerPanel.add(confirmPasswordField);
        registerPanel.add(registerButton);
        registerPanel.add(goToLoginButton);

        mainPanel.add(registerPanel, "Register");
    
