// Recent file as of 10:07 pm, problema kay di gihapon ma retain info sa profile


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

class User {
    private String email;
    private String address;
    private String phone;
    private String username;
    private String password;
    private double balance;
    private List<String> transactionHistory;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.balance = 0.0;
        this.transactionHistory = new ArrayList<>();
        this.email = "";
        this.address = "";
        this.phone = "";
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    public String getEmail() {
        return email;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getAddress() {
        return address;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getPhone() {
        return phone;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public double getBalance() {
        return balance;
    }

    public List<String> getTransactionHistory() {
        return new ArrayList<>(transactionHistory);
    }

    public String getTransactionHistoryAsString() {
        StringBuilder historyString = new StringBuilder();
        for (String transaction : transactionHistory) {
            historyString.append(transaction).append(",");
        }
        return historyString.toString();
    }

    public void deposit(double amount) {
        balance += amount;
        recordTransaction("Deposit", amount);
    }

    public boolean withdraw(double amount) {
        if (amount > balance) {
            return false; // Insufficient funds
        }
        balance -= amount;
        recordTransaction("Withdrawal", amount);
        return true;
    }

    public void recordTransaction(String type, double amount) {
        String transaction = type + " - Amount: P" + amount;
        transactionHistory.add(transaction);
    }

    public void performTransaction(String type, double amount) {
    if (transactionHistory == null) {
        loadTransactionHistory();
    }
    recordTransaction(type, amount);
}


    public void loadTransactionHistory() {
        String transactionHistoryFileName = getUsername() + "_transactions.txt";
        File transactionHistoryFile = new File(transactionHistoryFileName);

        try (BufferedReader reader = new BufferedReader(new FileReader(transactionHistoryFile))) {
            transactionHistory.clear(); // Clear existing transaction history

            String line;
            while ((line = reader.readLine()) != null) {
                transactionHistory.add(line); // Add each line as a transaction
            }
        } catch (FileNotFoundException e) {
            // File not found, but it's okay. Just proceed without displaying an error message.
        } catch (IOException e) {
            // Other IOException, print the stack trace for debugging purposes
            e.printStackTrace();
        }
    }


    public void saveTransactionHistory() {
        File transactionHistoryFile = new File(getUsername() + "_transactions.txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(transactionHistoryFile))) {
            for (String transaction : getTransactionHistory()) {
                writer.write(transaction);
                writer.newLine();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public void loadProfileInfo() {
        String profileFileName = getUsername() + "_profile.txt";
        File profileFile = new File(profileFileName);

        try (BufferedReader reader = new BufferedReader(new FileReader(profileFile))) {
            // Read additional profile information and set it
            // Modify the following lines according to your file format
            setEmail(reader.readLine());
            setAddress(reader.readLine());
            setPhone(reader.readLine());
        } catch (FileNotFoundException e) {
            // File not found, but it's okay. Just proceed without displaying an error message.
        } catch (IOException e) {
            // Other IOException, print the stack trace for debugging purposes
            e.printStackTrace();
        }
    }

    public void saveProfileInfo() {
        File profileFile = new File(getUsername() + "_profile.txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(profileFile))) {
            // Write additional profile information to the file
            // Modify the following lines according to your file format
            writer.write(getEmail());
            writer.newLine();
            writer.write(getAddress());
            writer.newLine();
            writer.write(getPhone());
            writer.newLine();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}

public class BankManagementSystemV5 {
    private static JFrame mainFrame;
    private static JPanel mainPanel;
    private static CardLayout cardLayout;
    private static List<User> userList = new ArrayList<>();
    private static User currentUser;
    private static File usersFile = new File("users.txt");
     
    private static void createAndShowGUI() {
        
        mainFrame = new JFrame("Login System");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainPanel = new JPanel();
        cardLayout = new CardLayout();
        mainPanel.setLayout(cardLayout);

        createLoginPanel();
        createRegisterPanel();
        createMainMenu();

        mainFrame.add(mainPanel);
        mainFrame.setSize(500, 250);
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setVisible(true);
        
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            if (currentUser != null) {
                currentUser.saveTransactionHistory();
                currentUser.saveProfileInfo();
            }
            saveAllUserData();
        }));
    }

    private static void createLoginPanel() {
        JPanel loginPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        loginPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton goToRegisterButton = new JButton("Register");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (validateLogin(username, password)) {
                    JOptionPane.showMessageDialog(mainFrame, "Login successful!");
                    cardLayout.show(mainPanel, "MainMenu"); // Switch to the main menu
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Invalid username/password combination.");
                }
            }
        });

        goToRegisterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Register");
            }
        });

        loginPanel.add(usernameLabel);
        loginPanel.add(usernameField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(goToRegisterButton);

        mainPanel.add(loginPanel, "Login");
    }
    
     private static boolean validateLogin(String username, String password) {
        for (User user : userList) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                currentUser = user;
                currentUser.loadTransactionHistory();
                currentUser.loadProfileInfo(); // Load additional profile information
                return true;
            }
        }
        return false;
    }

    
    private static void createRegisterPanel() {
        JPanel registerPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        registerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel idLabel = new JLabel("ID:");
        idLabel.setFont(labelFont);
        JTextField idField = new JTextField();
        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField();
        JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
        confirmPasswordLabel.setFont(labelFont);
        JPasswordField confirmPasswordField = new JPasswordField();
        JButton registerButton = new JButton("Register");
        JButton goToLoginButton = new JButton("Login");

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                if (id.trim().isEmpty() || username.trim().isEmpty() || password.trim().isEmpty() || confirmPassword.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(mainFrame, "Please fill in all fields.");
                    return;
                }

                // Check if the username already exists
                if (isUsernameTaken(username)) {
                    JOptionPane.showMessageDialog(mainFrame, "Username already exists. Please choose a different username.");
                } else {
                    // Register the new user
                    if (registerUser(username, password)) {
                        JOptionPane.showMessageDialog(mainFrame, "Registration successful!");
                        cardLayout.show(mainPanel, "Login");
                    } else {
                        JOptionPane.showMessageDialog(mainFrame, "Error registering user.");
                    }
                }
            }
        });        
        
        goToLoginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Login");
            }
        });

        registerPanel.add(idLabel);
        registerPanel.add(idField);
        registerPanel.add(usernameLabel);
        registerPanel.add(usernameField);
        registerPanel.add(passwordLabel);
        registerPanel.add(passwordField);
        registerPanel.add(confirmPasswordLabel);
        registerPanel.add(confirmPasswordField);
        registerPanel.add(registerButton);
        registerPanel.add(goToLoginButton);

        mainPanel.add(registerPanel, "Register");
    }

    private static void createMainMenu() {
        JPanel mainMenuPanel = new JPanel(new GridLayout(5, 1, 10, 10));
        mainMenuPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JButton depositButton = new JButton("Deposit");
        JButton withdrawButton = new JButton("Withdraw");
        JButton transactionHistoryButton = new JButton("Transaction History");
        JButton accountBalanceButton = new JButton("Account Balance");
        JButton profileButton = new JButton("Profile");
        JButton logoutButton = new JButton("Logout");
        
        // Action listeners for menu buttons
          depositButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for deposit button
                  performDeposit();
              }
          });
      
          withdrawButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for withdraw button
                  performWithdraw();
              }
          });
      
          transactionHistoryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentUser != null) {
                    currentUser.loadTransactionHistory();
                    List<String> transactions = currentUser.getTransactionHistory();

                    // Display transactions in a dialog
                    JTextArea textArea = new JTextArea();
                    for (String transaction : transactions) {
                        textArea.append(transaction + "\n");
                    }

                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setPreferredSize(new Dimension(300, 200));

                    JOptionPane.showMessageDialog(mainFrame, scrollPane, "Transaction History",
                            JOptionPane.PLAIN_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "No user logged in.");
                }
            }
        });
      
          accountBalanceButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for account balance button
                  showAccountBalance();
              }
          });
      
          profileButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for profile button
                  showProfile();
              }
          });
      
          logoutButton.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  // Action for logout button
                  performLogout();
              }
          });


        mainMenuPanel.add(depositButton);
        mainMenuPanel.add(withdrawButton);
        mainMenuPanel.add(transactionHistoryButton);
        mainMenuPanel.add(accountBalanceButton);
        mainMenuPanel.add(profileButton);
        mainMenuPanel.add(logoutButton); 

        mainPanel.add(mainMenuPanel, "MainMenu");
    }

    private static void loadUserDataFromFile() {
        File usersFile = new File("users.txt");
        try (BufferedReader reader = new BufferedReader(new FileReader(usersFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(":");
                if (userData.length == 2) {
                    userList.add(new User(userData[0], userData[1]));
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private static boolean isUsernameTaken(String username) {
        for (User user : userList) {
            if (user.getUsername().equals(username)) {
                return true;
            }
        }
        return false;
    }

    private static boolean registerUser(String username, String password) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(usersFile, true))) {
            writer.write(username + ":" + password);
            writer.newLine();
            writer.newLine();

            // Add the new user to the userList
            userList.add(new User(username, password));

            return true;
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    private static void performDeposit() {
        if (currentUser != null) {
        String amountString = JOptionPane.showInputDialog(mainFrame, "Enter amount to deposit:");
        try {
            double amount = Double.parseDouble(amountString);
            if (amount > 0) {
                currentUser.deposit(amount); // Update balance with deposited amount
                JOptionPane.showMessageDialog(mainFrame, "Deposited amount: P" + amount);
            } else {
                JOptionPane.showMessageDialog(mainFrame, "Please enter a valid positive amount.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Please enter a valid numeric amount.");
        }
    } else {
        JOptionPane.showMessageDialog(mainFrame, "No user logged in.");
    }
    }

    private static void performWithdraw() {
        if (currentUser != null) {
        String amountString = JOptionPane.showInputDialog(mainFrame, "Enter amount to withdraw:");
        try {
            double amount = Double.parseDouble(amountString);
            if (amount > 0) {
                if (amount <= currentUser.getBalance()) {
                    currentUser.withdraw(amount); // Update balance with withdrawn amount
                    JOptionPane.showMessageDialog(mainFrame, "Withdrawn amount: P" + amount);
                } else {
                    JOptionPane.showMessageDialog(mainFrame, "Insufficient funds.");
                }
            } else {
                JOptionPane.showMessageDialog(mainFrame, "Please enter a valid positive amount.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Please enter a valid numeric amount.");
        }
    } else {
        JOptionPane.showMessageDialog(mainFrame, "No user logged in.");
    }
    }

    private static void showAccountBalance() {
        JOptionPane.showMessageDialog(mainFrame, "Current Balance: P" + currentUser.getBalance());
    }

    private static void showProfile() {
        // Check if a user is logged in
    if (currentUser != null) {
        // Modified showProfile to display and edit currentUser's profile
        JPanel profilePanel = new JPanel(new GridLayout(6, 2, 10, 10));
        profilePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Font labelFont = new Font("Arial", Font.BOLD, 14);

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setFont(labelFont);
        JTextField nameField = new JTextField(currentUser.getUsername());

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setFont(labelFont);
        JTextField emailField = new JTextField(); // Assuming email is not stored in User class

        JLabel addressLabel = new JLabel("Address:");
        addressLabel.setFont(labelFont);
        JTextField addressField = new JTextField(); // Assuming address is not stored in User class

        JLabel phoneLabel = new JLabel("Phone:");
        phoneLabel.setFont(labelFont);
        JTextField phoneField = new JTextField(); // Assuming phone is not stored in User class

        JButton editButton = new JButton("Edit");
        JButton saveButton = new JButton("Save");
        JButton backButton = new JButton("Back to Menu");

        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Enable editing of profile fields
                nameField.setEditable(true);
                emailField.setEditable(true);
                addressField.setEditable(true);
                phoneField.setEditable(true);
                // Show the save button
                saveButton.setVisible(true);
            }
        });

        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Save changes and display updated profile
                currentUser.setUsername(nameField.getText());
                // Update other profile information as needed

                // Display updated profile details
                String updatedInfo = "Name: " + currentUser.getUsername() + "\n"
                        + "Email: " + emailField.getText() + "\n"
                        + "Address: " + addressField.getText() + "\n"
                        + "Phone: " + phoneField.getText();
                JOptionPane.showMessageDialog(mainFrame, "Profile updated!\n\n" + updatedInfo);

                // Disable editing of profile fields
                nameField.setEditable(false);
                emailField.setEditable(false);
                addressField.setEditable(false);
                phoneField.setEditable(false);
                // Hide the save button after saving
                saveButton.setVisible(false);

                // Save user details after updating profile
                saveUserData(currentUser, usersFile);

            }
        });

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "MainMenu");
            }
        });

        // Restrict phoneField to accept only numeric input
        phoneField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
                    e.consume();
                }
            }
        });

        // Initially set fields as uneditable
        nameField.setEditable(false);
        emailField.setEditable(false);
        addressField.setEditable(false);
        phoneField.setEditable(false);
        // Initially hide the save button
        saveButton.setVisible(false);

        profilePanel.add(nameLabel);
        profilePanel.add(nameField);
        profilePanel.add(emailLabel);
        profilePanel.add(emailField);
        profilePanel.add(addressLabel);
        profilePanel.add(addressField);
        profilePanel.add(phoneLabel);
        profilePanel.add(phoneField);
        profilePanel.add(editButton);
        profilePanel.add(saveButton);
        profilePanel.add(backButton);

        mainPanel.add(profilePanel, "ProfilePanel");
        cardLayout.show(mainPanel, "ProfilePanel");
    } else {
        JOptionPane.showMessageDialog(mainFrame, "No user logged in.");
    }
    }

    public static void saveUserData(User user, File usersFile) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(usersFile, true))) {
            writer.write(user.getUsername() + ":" + user.getPassword());
            writer.newLine();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private static void saveAllUserData() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(usersFile))) {
            for (User user : userList) {
                writer.write(user.getUsername() + ":" + user.getPassword());
                writer.newLine();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

     private static void performLogout() {
        if (currentUser != null) {
            int result = JOptionPane.showConfirmDialog(mainFrame, "Are you sure you want to log out?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                currentUser.saveTransactionHistory();
                currentUser.saveProfileInfo(); // Save additional profile information
                saveAllUserData();
                currentUser = null;
                cardLayout.show(mainPanel, "Login");
            }
        } else {
            JOptionPane.showMessageDialog(mainFrame, "No user logged in.");
        }
    }

    public static void main(String[] args) {
        loadUserDataFromFile();
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI();
        });
    }
}
